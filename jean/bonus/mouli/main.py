import subprocess
import sys

tests = [
    '4+2', '0123456789', '()+-*/', '3', '', 'syntax error',
    '4+2', '0123456789', '()+-*/%B', '3', '', 'syntax error',
    '4+2', '012345678+', '()+-*/%', '3', '', 'syntax error',
    '4+2', '0123456799', '()+-*/%', '3', '', 'syntax error',
    '(4+2', '0123456789', '()+-*/%', '4', '', 'syntax error',
    '4+2)', '0123456789', '()+-*/%', '4', '', 'syntax error',
    '4+*2', '0123456789', '()+-*/%', '4', '', 'syntax error',
    '4+ 2', '0123456789', '()+-*/%', '4', '', 'syntax error',
    '4a+2', '0123456789', '()+-*/%', '4', '', 'syntax error',

    '21+21', '0123456789', '()+-*/%', '5', '42', '',
    '18+24', '0123456789', '()+-*/%', '5', '42', '',
    '100+1', '0123456789', '()+-*/%', '5', '101', '',
    '1+100', '0123456789', '()+-*/%', '5', '101', '',
    '9999999+1', '0123456789', '()+-*/%', '9', '10000000', '',
    '99999999999999999999999999999999999999999999999999999999+22222222222222222222222222222222222222222222222222222222222222222222222222222222', '0123456789', '()+-*/%', '137', '22222222222222222222222322222222222222222222222222222222222222222222222222222221', '',
    '5126748128762421244912841241278945921874128954297186428164521894612+6583769823608127640865836012604912749612784618752091649126478589214627164897252', '0123456789', '()+-*/%', '147', '6583769823613254388994598433849825590854063564673965778080775775642791686791864', '',

    '42-21', '0123456789', '()+-*/%', '5', '21', '',
    '21-42', '0123456789', '()+-*/%', '5', '-21', '',
    '-21-42', '0123456789', '()+-*/%', '6', '-63', '',
    '100-1', '0123456789', '()+-*/%', '5', '99', '',
    '1-100', '0123456789', '()+-*/%', '5', '-99', '',
    '100-95', '0123456789', '()+-*/%', '6', '5', '',
    '42-35', '0123456789', '()+-*/%', '5', '7', '',
    '35-42', '0123456789', '()+-*/%', '5', '-7', '',
    '42--21', '0123456789', '()+-*/%', '6', '63', '',
    '1-99999999999999999999999999999999999999999999999999999999999', '0123456789', '()+-*/%', '61', '-99999999999999999999999999999999999999999999999999999999998', '',
    '-1-99999999999999999999999999999999999999999999999999999999999', '0123456789', '()+-*/%', '62', '-100000000000000000000000000000000000000000000000000000000000', '',
    '99999999999999999999999999999999999999999999999999999999999-1', '0123456789', '()+-*/%', '61', '99999999999999999999999999999999999999999999999999999999998', '',
    '12764827412078461289745201784629842619845120874601294612874520714612098-1247606126412948126497124601298460129846208714112487652412785', '0123456789', '()+-*/%', '133', '12764827410830855163332253658132718018546660744755085898762033062199313', '',


    '2*3', '0123456789', '()+-*/%', '3', '6', '',
    '4*5', '0123456789', '()+-*/%', '3', '20', '',
    '5*200', '0123456789', '()+-*/%', '5', '1000', '',
    '99*99', '0123456789', '()+-*/%', '5', '9801', '',
    '-4*25', '0123456789', '()+-*/%', '5', '-100', '',
    '25*-4', '0123456789', '()+-*/%', '5', '-100', '',
    '99999999999999999999999999999999999999999999999999999*777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777', '0123456789', '()+-*/%', '156', '77777777777777777777777777777777777777777777777777776999999999999999999999999999999999999999999999999922222222222222222222222222222222222222222222222222223', '',
    '532876325723095732765372650923875291086527164902175083765958619735783269562109874921861297664298769874621987642*1246912874601294628648937648736764376534726897469126412604926142816482154785276814527816489216482517681', '0123456789', '()+-*/%', '215', '664450351114361100711085969368262191836023764001373945454090308142458561975103334583328675476890540070505678523578057449992068166489130049050716326309713459239729318004006724554489005140242759251233530900628498202', '',
    '-532876325723095732765372650923875291086527164902175083765958619735783269562109874921861297664298769874621987642*1246912874601294628648937648736764376534726897469126412604926142816482154785276814527816489216482517681', '0123456789', '()+-*/%', '216', '-664450351114361100711085969368262191836023764001373945454090308142458561975103334583328675476890540070505678523578057449992068166489130049050716326309713459239729318004006724554489005140242759251233530900628498202', '',

    '6/2', '0123456789', '()+-*/%', '3', '3', '',
    '2/10', '0123456789', '()+-*/%', '4', '0', '',
    '100/4', '0123456789', '()+-*/%', '5', '25', '',
    '99/2', '0123456789', '()+-*/%', '4', '49', '',
    '99/99', '0123456789', '()+-*/%', '5', '1', '',
    '-99/5', '0123456789', '()+-*/%', '5', '-19', '',
    '-100/-6', '0123456789', '()+-*/%', '7', '16', '',
    '99999999999999999999999999999999999999999999999999/22222222222222222222222222222222222222222222222222', '0123456789', '()+-*/%', '101', '4', '',
    '532876325723095732765372650923875291086527164902175083765958619735783269562109874921861297664298769874621987642/1246912874601294628648937648736764376534726897469126412604926142816482154785276814527816489216', '0123456789', '()+-*/%', '206', '427356503070421071', '',
    '-532876325723095732765372650923875291086527164902175083765958619735783269562109874921861297664298769874621987642/1246912874601294628648937648736764376534726897469126412604926142816482154785276814527816489216', '0123456789', '()+-*/%', '207', '-427356503070421071', '',
    '42/0', '0123456789', '()+-*/%', '4', '', 'Error|error|syntax error',

    '6%2', '0123456789', '()+-*/%', '3', '0', '',
    '2%10', '0123456789', '()+-*/%', '4', '2', '',
    '100%4', '0123456789', '()+-*/%', '5', '0', '',
    '99%2', '0123456789', '()+-*/%', '4', '1', '',
    '99%99', '0123456789', '()+-*/%', '5', '0', '',
    '-99%5', '0123456789', '()+-*/%', '5', '-4', '',
    '-100%-6', '0123456789', '()+-*/%', '7', '-4', '',
    '99999999999999999999999999999999999999999999999999%22222222222222222222222222222222222222222222222222', '0123456789', '()+-*/%', '101', '11111111111111111111111111111111111111111111111111', '',
    '532876325723095732765372650923875291086527164902175083765958619735783269562109874921861297664298769874621987642%1246912874601294628648937648736764376534726897469126412604926142816482154785276814527816489216', '0123456789', '()+-*/%', '206', '920167176958683827359406275469506932797899191358426086278133629785907078296694601764571317306', '',
    '-532876325723095732765372650923875291086527164902175083765958619735783269562109874921861297664298769874621987642%1246912874601294628648937648736764376534726897469126412604926142816482154785276814527816489216', '0123456789', '()+-*/%', '207', '-920167176958683827359406275469506932797899191358426086278133629785907078296694601764571317306', '',
    '42%0', '0123456789', '()+-*/%', '4', '', 'Error|error|syntax error',

    '10101*10', '01', '()+-*/%', '8', '101010', '',
    'ab+cd', '0123456789abcdef', '()+-*/%', '5', '178', '',
    '-(e@-(;*!@))', '0A@!;ie& ]', '()+-*/%', '12', 'ee', '',
    '5(10', '0123456789', '[]+-(/%', '4', '50', '',

    '3+4*2', '0123456789', '()+-*/%', '5', '11', '',
    '3*4+2', '0123456789', '()+-*/%', '5', '14', '',
    '3-4-2', '0123456789', '()+-*/%', '5', '-3', '',
    '--++-6*12', '0123456789', '()+-*/%', '9', '-72', '',
    '6*--++-12', '0123456789', '()+-*/%', '9', '-72', '',
    '--+++++--6*--++--12', '0123456789', '()+-*/%', '19', '72', '',
    '(2+5)*2', '0123456789', '()+-*/%', '7', '14', '',
    '(18+42)+5*42', '0123456789', '()+-*/%', '12', '270', '',
    '5+(((((2+4)*8+50*(10+1))+20)-42)+3*2)', '0123456789', '()+-*/%', '37', '587', '',
    '(-((5+(((((2+4)*8+50*(10+1))+20)-42)+3*2))))', '0123456789', '()+-*/%', '44', '-587', '',
    '(91827816491287649812764219-912874698127694871264249876124)*(412098741246217864918247019287492689219047012412*(98472610462894892714628176491274692814+-14712087012984702918740928131293761298376123)/18273687126387213)+1', '0123456789', '()+-*/%', '217', '302840505471185192375895180251526339706415827148180226071701791233396096402522152473050029302555762136581', '',
    '--+(91827816491287649812764219-++912874698127694871264249876124)*-+-(-+412098741246217864918247019287492689219047012412*-(98472610462894892714628176491274692814+-14712087012984702918740928131293761298376123)/-18273687126387213)+-1', '0123456789', '()+-*/%', '230', '-302840505471185192375895180251526339706415827148180226071701791233396096402522152473050029302555762136581', '',
]

champ = ["calc", "base", "op", "len", "res", "err"]

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

PASSED = 0
FAILED = 0
TIMEOUT = 2

# build a table mapping all non-printable characters to None
NOPRINT_TRANS_TABLE = {
    i: None for i in range(0, sys.maxunicode + 1) if not chr(i).isprintable()
}

def make_printable(s):
    """Replace non-printable characters in a string."""
    return s.translate(NOPRINT_TRANS_TABLE)

for index in range(0, len(tests), 6):
    test = tests[index:index + 6]
    try:
        result = subprocess.run(f"""echo "{test[0]}" | ./calc "{test[1]}" "{test[2]}" "{test[3]}" """, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=TIMEOUT)
        try:
            out = make_printable(result.stdout.decode("utf8")) if result.stdout else ""
            err = make_printable(result.stderr.decode("utf8")) if result.stderr else ""

            if test[4] == out and err in test[5].split('|'):
                print(f"{bcolors.OKGREEN}{index//6} => PASSED {bcolors.ENDC}")
                PASSED += 1
            else:
                print(f"{bcolors.FAIL}{index//6} => FAILED => {bcolors.ENDC}", end="")
                print(f"""[{f'{chr(9)}| '.join(map(f' => '.join, zip(champ, map(lambda x: f"'{x}'" if len(x) else 'None', test))))}] => out : '{out}'{chr(9)}| err : '{err}'""")
                FAILED += 1
        except Exception as e:
            print(f"{bcolors.FAIL}{index//6} => FAILED => {bcolors.ENDC}", end="")
            print(f"""[{f'{chr(9)}| '.join(map(f' => '.join, zip(champ, map(lambda x: f"'{x}'" if len(x) else 'None', test))))}] => out : '{out}'{chr(9)}| err : '{err}'""")
            FAILED += 1
    except Exception as e:
        print(f"{bcolors.FAIL}{index//6} => TIMEOUT => {bcolors.ENDC}", end="")
        print(f"""[{f'{chr(9)}| '.join(map(f' => '.join, zip(champ, map(lambda x: f"'{x}'" if len(x) else 'None', test))))}] => out : '{out}'{chr(9)}| err : '{err}'""")
        FAILED += 1
    subprocess.run(f"killall calc", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=TIMEOUT)
print(f"\n {bcolors.OKGREEN}PASSED => {PASSED}{bcolors.ENDC}    {bcolors.FAIL}FAILED => {FAILED}{bcolors.ENDC}")
