version: '3'
# format:
#   tout les services:configs:
#     serv1:
#       le dossier a build (pas obligatoire) (build: folder)
#       s'il on utilise une image déjà existante, (image: image name)
#       pour avoir des données persistente, on peu utilisé les volumes (volumes: volumes name)
#       pour le port forwarding (ports: port docker: port local)
#       s'il faut le link a un sous réseaux: (networks: networks name)
#       pour set les variables d'environment: (environment: var: value)
#       les condition de restart (restart: condition)
#     serv2:
#     ...:
services:
  poll:
    build: poll/
    ports:
      - "5000:80"
    networks:
      - poll-tier
    # set des identifiant pour postgres grace au variables d'environment pour si connecter
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    restart: on-failure
  redis:
    image: "redis"
    ports:
      - "6379:6379"
    networks:
      - poll-tier
      - back-tier
    restart: on-failure
  worker:
    build: worker/
    networks:
      - back-tier
    # set des identifiant pour postgres grace au variables d'environment pour si connecter
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    restart: on-failure
  db:
    image: "postgres"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - result-tier
      - back-tier
    # set des identifiant pour postgres grace au variables d'environment pour initialiser la db
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    restart: on-failure
  result:
    build: result/
    ports:
      - "5001:80"
    networks:
      - result-tier
    # set des identifiant pour postgres grace au variables d'environment pour si connecter
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    restart: on-failure
# in init le volumes
volumes:
  db-data:
# on créer les différent réseaux pour connecter les services entre eux
networks:
  poll-tier:
  result-tier:
  back-tier:
