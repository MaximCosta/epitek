name: CHOCOLATINE
env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/B-DOP-200-MPL-2-1-chocolatine-maxim.costa.git"
  EXECUTABLES: "exec1,exec2"

on:
  push:
    branches-ignore: [ "ga-ignore-**" ]
  pull_request:
    branches-ignore: [ "ga-ignore-**" ]
  workflow_dispatch:
jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Checks if the repository is clean and void of any unwanted files (temp files%2C binary files%2C etc.)
        run: |
          a=$(find -regex "^\(.*/*\(\.\(o\|a\|so\|gcno\|gcda\|gcov\)\|\~\|\(\(?i\)*pain_au_chocolat\(.*|*\)\)\)\|.*/*#*#\)$" -or -path "*/tmp/*")
          if [ -n "$a" ]; then
            echo "$a" | while read -r file;do
              echo "::error file=$file,line=1,title=Unwanted file detected::$file"
            done
            exit 1
          fi
  check_program_compilation:
    needs: [check_repository_cleanliness]
    if: success()
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    name: check program compilation
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: make
        timeout-minutes: 2
        run: |
          make
      - name: make clean
        run: |
          make clean
      - name: check compilation
        run: |
          IFS=',' read -ra ARR <<< "$EXECUTABLES"
          for i in "${ARR[@]}"; do
            if [ ! -f "$i" ]; then
              echo "::error file=$i,line=1,title=Executable not found::$i"
              exit 1
            fi
          done
  run_tests:
    needs: [check_repository_cleanliness, check_program_compilation]
    if: success()
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    name: run tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: make test
        timeout-minutes: 2
        run: |
          make test_run
  push_to_mirror:
    needs: [check_repository_cleanliness, check_program_compilation, run_tests]
    if: ${{ github.event_name == 'push' }} && success()
    runs-on: ubuntu-latest
    name: push to mirror
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
